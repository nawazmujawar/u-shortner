{"version":3,"sources":["img/portable-document-format.svg","logo.svg","components/Spinner/Spinner.js","components/Link Shortner/Shortner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","className","Shortner","state","URL","shortURL","display","isloading","urlHandler","a","data","console","log","Axios","post","response","setTimeout","setState","copyClickHandler","navigator","clipboard","writeText","alert","this","style","position","top","left","color","textAlign","backgroundColor","height","fontSize","fontWeight","id","onClick","src","copyLogo","alt","width","type","value","placeholder","onChange","e","target","class","bottom","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,sD,4ECA3CD,EAAOC,QAAU,IAA0B,kC,gPCO5BC,G,MAJC,WACZ,OAAO,yBAAKC,UAAU,UAAf,gB,iBC8EIC,E,4MA3EXC,MAAQ,CACJC,IAAK,GACLC,SAAU,GACVC,SAAS,EACTC,WAAW,G,EAKfC,W,sBAAa,8BAAAC,EAAA,6DACHC,EAAO,CACTN,IAAK,EAAKD,MAAMC,KAEpBO,QAAQC,IAAIF,GAJH,SAKcG,IAAMC,KAAK,sDAAuDJ,GALhF,OAKHK,EALG,OAMTC,YAAW,WACP,EAAKC,SAAS,CACVV,WAAW,MAEhB,KACHI,QAAQC,IAAIG,EAASL,KAAKN,KAC1B,EAAKa,SAAS,CACVZ,SAAUU,EAASL,KAAKN,IACxBE,SAAS,EACTC,WAAW,IAfN,2C,EAkBbW,iBAAmB,WACfC,UAAUC,UAAUC,UAAU,EAAKlB,MAAME,UACzCiB,MAAM,UACN,EAAKL,SAAS,CACVb,IAAK,GACLC,SAAU,GACVC,SAAS,K,uDAGP,IAAD,OACL,OAAIiB,KAAKpB,MAAMI,UACJ,yBAAKiB,MACR,CACIC,SAAU,WACVC,IAAK,MACLC,KAAM,QAEZ,kBAAC,EAAD,OAKF,yBAAK1B,UAAU,aACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,SAAd,YACA,uBAAGA,UAAU,UAAb,UAA6B,0BAAMuB,MAAO,CAAEI,MAAO,YAAtB,aAEvBL,KAAKpB,MAAMG,QAOT,yBAAKkB,MAAO,CAAEK,UAAW,WACrB,uBAAGL,MAAO,CAAEM,gBAAiB,UAAWC,OAAQ,OAAQC,SAAU,OAAQC,WAAY,SAAWV,KAAKpB,MAAME,UAC5G,4BAAQ6B,GAAG,UAAUC,QAASZ,KAAKL,kBAAkB,yBAAKkB,IAAKC,IAAUC,IAAI,OAAOd,MAAO,CAAEe,MAAO,OAAQR,OAAQ,YARxH,6BACI,2BAAOS,KAAK,OAAOC,MAAOlB,KAAKpB,MAAMC,IAAKsC,YAAY,oBAAoBC,SAAU,SAACC,GAAD,OAAO,EAAK3B,SAAS,CAAEb,IAAKwC,EAAEC,OAAOJ,WACzH,6BACA,4BAAQD,KAAK,SAASN,GAAG,UAAUC,QAASZ,KAAKf,WAAYsC,MAAM,mBAAnE,cAWhB,uBAAG7C,UAAU,YAAYuB,MAAO,CAAEC,SAAU,WAAYsB,OAAQ,MAAOnB,MAAO,YAA9E,6C,GAtEOoB,aCORC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBxC,WACrBA,UAAUyC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.55bbf732.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/portable-document-format.07b653bd.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nconst Spinner = () => {\r\n    return <div className=\"Loader\">Loading...</div>\r\n}\r\n\r\nexport default Spinner","import React, { Component } from 'react'\r\nimport './Shortner.css'\r\nimport copyLogo from '../../img/portable-document-format.svg'\r\nimport Spinner from '../Spinner/Spinner'\r\n\r\nimport Axios from 'axios'\r\nclass Shortner extends Component {\r\n    state = {\r\n        URL: \"\",\r\n        shortURL: \"\",\r\n        display: false,\r\n        isloading: false\r\n    }\r\n    // componentDidMount() {\r\n    //     this.urlHandler()\r\n    // }\r\n    urlHandler = async () => {\r\n        const data = {\r\n            URL: this.state.URL\r\n        }\r\n        console.log(data)\r\n        const response = await Axios.post(\"https://url-shortner-backend.herokuapp.com/shortner\", data)\r\n        setTimeout(() => {\r\n            this.setState({\r\n                isloading: false\r\n            })\r\n        }, 2000)\r\n        console.log(response.data.URL)\r\n        this.setState({\r\n            shortURL: response.data.URL,\r\n            display: true,\r\n            isloading: true\r\n        })\r\n    }\r\n    copyClickHandler = () => {\r\n        navigator.clipboard.writeText(this.state.shortURL)\r\n        alert(\"copied\")\r\n        this.setState({\r\n            URL: \"\",\r\n            shortURL: \"\",\r\n            display: false\r\n        })\r\n    }\r\n    render() {\r\n        if (this.state.isloading) {\r\n            return <div style={\r\n                {\r\n                    position: \"absolute\",\r\n                    top: \"40%\",\r\n                    left: \"50%\"\r\n                }\r\n            }><Spinner /></div>\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"container\">\r\n                <div className=\"align-middle\">\r\n                    <h1 className=\"Title\">Shortner</h1>\r\n                    <p className=\"slogan\">get URL<span style={{ color: \"#38003c\" }}> shorten</span></p>\r\n                    {\r\n                        (!this.state.display) ?\r\n                            <div>\r\n                                <input type=\"text\" value={this.state.URL} placeholder=\"paste URL here...\" onChange={(e) => this.setState({ URL: e.target.value })} />\r\n                                <br />\r\n                                <button type=\"button\" id=\"getLink\" onClick={this.urlHandler} class=\"btn btn-warning\">Get link</button>\r\n                            </div>\r\n                            :\r\n                            <div style={{ textAlign: \"center\" }}>\r\n                                <p style={{ backgroundColor: \"#D3D3D3\", height: \"45px\", fontSize: \"30px\", fontWeight: \"bold\" }}>{this.state.shortURL}</p>\r\n                                <button id=\"copyBtn\" onClick={this.copyClickHandler}><img src={copyLogo} alt=\"Copy\" style={{ width: \"40px\", height: \"40px\" }} /></button>\r\n                            </div>\r\n                    }\r\n\r\n\r\n                </div>\r\n                <p className=\"container\" style={{ position: \"absolute\", bottom: \"1px\", color: \"#38003c\" }}>Copyright &copy; 2020 : Nawaz Mujawar </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Shortner\r\n    // <input id=\"email\" type=\"email\" class=\"validate\">\r\n    // < label for= \"email\" > Email</label >","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Shortner from './components/Link Shortner/Shortner';\n\nfunction App() {\n  return (\n    <div >\n      <Shortner />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}